rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rule 1: Users can manage their own user document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Rule 2: Trip-related operations.
    match /trips/{tripId} {
      // Helper function to safely check for trip membership.
      function isMember() {
        return 'members' in resource.data && request.auth.uid in resource.data.members;
      }
      
      // Helper function to safely check if the user is the trip creator.
      function isCreator() {
        return 'info' in resource.data && 'createdBy' in resource.data.info && resource.data.info.createdBy == request.auth.uid;
      }

      // Allow members to read the trip document.
      allow read: if request.auth != null && isMember();

      // Allow any authenticated user to create a trip, ensuring they are the creator.
      allow create: if request.auth != null && request.resource.data.info.createdBy == request.auth.uid;

      // Allow members to update the trip.
      allow update: if request.auth != null && isMember();
      
      // Allow only the creator to delete the trip.
      allow delete: if request.auth != null && isCreator();

      // Rule 3: Access control for the 'data' subcollection (e.g., itinerary).
      match /data/{docId} {
        // Helper function to safely check membership on the parent trip document.
        function isTripMember() {
          let tripDoc = get(/databases/$(database)/documents/trips/$(tripId));
          // Check for the existence of 'members' field before checking for inclusion.
          return 'members' in tripDoc.data && request.auth.uid in tripDoc.data.members;
        }

        // Allow trip members to read and write documents in the subcollection.
        allow read, write: if request.auth != null && isTripMember();
      }
    }
  }
}
