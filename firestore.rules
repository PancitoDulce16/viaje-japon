rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // Funciones de Ayuda (Helpers)
    // =====================================================================
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper to check membership on a trip document via get()
    // Used for subcollection rules.
    function isTripMember(tripId) {
      let trip = get(/databases/$(database)/documents/trips/$(tripId));
      return isSignedIn() && 
             trip.data != null && 
             'members' in trip.data && 
             trip.data.members is list && 
             request.auth.uid in trip.data.members;
    }

    function isNewDataValidExpense(data) {
        return data.desc is string &&
               data.amount is number && data.amount > 0 &&
               data.category is string &&
               data.timestamp is number &&
               data.addedBy == request.auth.email;
    }

    // =====================================================================
    // Reglas para la colección 'users'
    // =====================================================================
    match /users/{userId} {
      // Solo el propio usuario puede leer o escribir su documento principal
      allow read, write: if isSignedIn() && request.auth.uid == userId;

      // Y todos sus subdocumentos
      match /{document=**} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
      }
    }

    // =====================================================================
    // Reglas para la colección 'userSessions' (Feedback Tracker)
    // =====================================================================
    match /userSessions/{sessionId} {
      // Solo el dueño de la sesión puede escribir
      // SessionId format: userId_timestamp
      allow create, update: if isSignedIn() &&
                              request.resource.data.userId == request.auth.uid;
      // Solo el dueño puede leer sus propias sesiones
      allow read: if isSignedIn() &&
                     resource.data.userId == request.auth.uid;
    }

    // =====================================================================
    // Reglas para la colección 'trips'
    // =====================================================================
    match /trips/{tripId} {
      // LECTURA: Cualquier miembro del viaje puede leer la información principal.
      // Uses resource.data, not get().
      allow read: if isSignedIn() && 
                     'members' in resource.data && 
                     resource.data.members is list && 
                     request.auth.uid in resource.data.members;

      // CREACIÓN: Cualquier usuario autenticado puede crear un nuevo viaje.
      allow create: if isSignedIn() &&
                       request.resource.data.info.createdBy == request.auth.uid &&
                       request.auth.uid in request.resource.data.members;

      // ACTUALIZACIÓN: Solo el dueño puede actualizar la información del viaje.
      // Uses resource.data, not get().
      allow update: if (isSignedIn() && 
                       'info' in resource.data && 
                       resource.data.info is map && 
                       'createdBy' in resource.data.info && 
                       request.auth.uid == resource.data.info.createdBy) &&
                       request.resource.data.info.createdBy == resource.data.info.createdBy;

      // BORRADO: Solo el dueño del viaje puede eliminarlo.
      // Uses resource.data, not get().
      allow delete: if isSignedIn() && 
                       'info' in resource.data && 
                       resource.data.info is map && 
                       'createdBy' in resource.data.info && 
                       request.auth.uid == resource.data.info.createdBy;

      // --- Sub-colección de Gastos ---
      match /expenses/{expenseId} {
        allow read: if isTripMember(tripId);
        allow create: if isTripMember(tripId) && isNewDataValidExpense(request.resource.data);
        allow delete: if isTripMember(tripId);
        allow update: if false;
      }

      // --- Sub-colección de Datos (Itinerario, Notas, Packing) ---
      match /data/{docId} {
        allow read: if isTripMember(tripId);
        allow write: if isTripMember(tripId) &&
                        'updatedBy' in request.resource.data &&
                        request.resource.data.updatedBy == request.auth.email &&
                        'lastUpdated' in request.resource.data &&
                        request.resource.data.lastUpdated is string;
      }

      // --- Sub-colección de Actividades (Checklist) ---
      match /activities/{docId} {
        allow read: if isTripMember(tripId);
        allow write: if isTripMember(tripId) &&
                        'updatedBy' in request.resource.data &&
                        request.resource.data.updatedBy == request.auth.email &&
                        'lastUpdated' in request.resource.data &&
                        request.resource.data.lastUpdated is string;
      }
    }
  }
}
