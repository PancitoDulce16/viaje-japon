name: Build and Deploy to Firebase Hosting & Functions

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20' # ACTUALIZADO: Versión de Node.js actualizada

      - name: Install dependencies
        run: |
          npm ci || echo "No package.json found or no dependencies to install"

      - name: Generate client config files
        env:
          CONFIG_GOOGLE_PLACES_KEY: ${{ secrets.CONFIG_GOOGLE_PLACES_KEY }}
          FIREBASE_CONFIG_JSON: ${{ secrets.FIREBASE_CONFIG_JSON }}
          API_KEYS_JSON: ${{ secrets.API_KEYS_JSON }}
        run: |
          mkdir -p js || true

          if [ -n "$CONFIG_GOOGLE_PLACES_KEY" ]; then
          printf '%s\n%s\n%s\n' "// Generated file - DO NOT COMMIT" "export const APP_CONFIG = {" "  GOOGLE_PLACES_API_KEY: '$CONFIG_GOOGLE_PLACES_KEY'" > js/config.js
          printf '%s\n%s\n' "};" "" >> js/config.js || true
          fi

          if [ -n "$FIREBASE_CONFIG_JSON" ]; then
          # --- Contenido del archivo firebase-config.js ---
          # Se escribe todo de una vez para mayor claridad
          printf '%s\n' "// Generated file - DO NOT COMMIT" > js/firebase-config.js
          printf '%s\n' "import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';" >> js/firebase-config.js
          printf '%s\n' "import { getFirestore } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';" >> js/firebase-config.js
          printf '%s\n' "import { getAuth, GoogleAuthProvider } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';" >> js/firebase-config.js
          printf '%s\n\n' "import { getStorage } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-storage.js';" >> js/firebase-config.js
          
          # CORREGIDO: Esta línea ahora inserta el JSON de forma segura
          printf 'const firebaseConfig = %s;\n\n' "$FIREBASE_CONFIG_JSON" >> js/firebase-config.js

          printf '%s\n' "let app = null;" >> js/firebase-config.js
          printf '%s\n' "let db = null;" >> js/firebase-config.js
          printf '%s\n' "let auth = null;" >> js/firebase-config.js
          printf '%s\n' "let storage = null;" >> js/firebase-config.js
          printf '%s\n\n' "let googleProvider = null;" >> js/firebase-config.js
          printf '%s\n' "if (firebaseConfig && firebaseConfig.apiKey) {" >> js/firebase-config.js
          printf '%s\n' "  app = initializeApp(firebaseConfig);" >> js/firebase-config.js
          printf '%s\n' "  db = getFirestore(app);" >> js/firebase-config.js
          printf '%s\n' "  auth = getAuth(app);" >> js/firebase-config.js
          printf '%s\n' "  storage = getStorage(app);" >> js/firebase-config.js
          printf '%s\n' "  googleProvider = new GoogleAuthProvider();" >> js/firebase-config.js
          printf '%s\n' "  console.log('🔥 Firebase initialized for project:', firebaseConfig.projectId || '(unknown)');" >> js/firebase-config.js
          printf '%s\n' "} else {" >> js/firebase-config.js
          printf '%s\n' "  console.warn('⚠️ Firebase not initialized because configuration is missing or incomplete.');" >> js/firebase-config.js
          printf '%s\n\n' "}" >> js/firebase-config.js
          printf '%s\n' "export { app, db, auth, storage, googleProvider };" >> js/firebase-config.js
          fi

          if [ -n "$API_KEYS_JSON" ]; then
          printf '%s\n' "// Generated file - DO NOT COMMIT" > js/apis-config.js
          printf 'export const RUNTIME_API_KEYS = %s;\n' "$API_KEYS_JSON" >> js/apis-config.js
          fi

      - name: Build site (if you have a build step)
        run: |
          if [ -f package.json ]; then
            npm run build || true
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'

      - name: Install firebase-tools
        run: npm install -g firebase-tools

      - name: Ensure .firebaserc uses correct project
        run: |
          if [ -n "${{ secrets.FIREBASE_PROJECT_ID }}" ]; then
            echo "{\"projects\": {\"default\": \"${{ secrets.FIREBASE_PROJECT_ID }}\"}}" > .firebaserc
          fi

      - name: List currently deployed functions (for debug)
        run: |
          echo "Listing functions for project: ${{ secrets.FIREBASE_PROJECT_ID }}"
          firebase functions:list --project ${{ secrets.FIREBASE_PROJECT_ID }} || true

      - name: Install functions dependencies (if any)
        run: |
          if [ -d functions ]; then
            echo "Installing functions dependencies..."
            npm --prefix functions ci || npm --prefix functions install || true
          else
            echo "No functions directory present"
          fi

      - name: Explicitly deploy all functions (debug)
        run: |
          echo "Attempting explicit deploy of all functions (debug mode)"
          firebase deploy --only functions --project ${{ secrets.FIREBASE_PROJECT_ID }} --debug || true

      - name: Prepare public folder for Hosting
        run: |
          echo "Preparing public directory for Firebase Hosting..."
          # No need to remove 'public' as deploy action handles it.
          # Create dir just in case
          mkdir -p public
          # Copy all root files and static folders into public
          cp -R * public/ --parents

      - name: Deploy to Firebase
        run: |
          firebase deploy --only hosting,functions --project ${{ secrets.FIREBASE_PROJECT_ID }}
